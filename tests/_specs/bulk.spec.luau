--!optimize 0
local TEST, DONE, PREFIX = require("@test/utils/spec")(...)

local b2 = require("@b2")
local ecs = require("@test/utils/ecs")

local pair = b2.pair

local A = ecs.component()
local B = ecs.component()
local C = ecs.component()
local D = ecs.component()
local E = ecs.component()
local F = ecs.component()
local e1 = ecs.entity()

PREFIX("bulk_add")

TEST("components", function(interface)
	ecs.bulk_add(e1, { A, B, C })
	interface:expect_truthy(ecs.has(e1, A))
	interface:expect_truthy(ecs.has(e1, B))
	interface:expect_truthy(ecs.has(e1, C))
end)

PREFIX("bulk_set")

TEST("components", function(interface)
	ecs.bulk_set(e1, { A, B, C }, { 1, 2, 3 })
	interface:expect_equal(ecs.get(e1, A), 1)
	interface:expect_equal(ecs.get(e1, B), 2)
	interface:expect_equal(ecs.get(e1, C), 3)
	ecs.bulk_set(e1, { A, B, C }, { 4, 5, 6 })
	interface:expect_equal(ecs.get(e1, A), 4)
	interface:expect_equal(ecs.get(e1, B), 5)
	interface:expect_equal(ecs.get(e1, C), 6)
end)

TEST("components and tag", function(interface)
	ecs.bulk_set(e1, { A, B, C }, { 1, 2, 3 })
	interface:expect_equal(ecs.get(e1, C), 3)
	ecs.bulk_set(e1, { D, E, F, C }, { 4, nil, 6, 9 })
	interface:expect_equal(ecs.get(e1, A), 1)
	interface:expect_equal(ecs.get(e1, B), 2)
	interface:expect_equal(ecs.get(e1, C), 9)
	interface:expect_equal(ecs.get(e1, D), 4)
	interface:expect_equal(ecs.get(e1, E), nil)
	interface:expect_equal(ecs.get(e1, F), 6)
	interface:expect_truthy(ecs.has(e1, E))
end)

TEST("component pairs", function(interface)
	ecs.bulk_set(e1, { pair(A, B), pair(D, A) }, { true, 1 })
	interface:expect_equal(ecs.get(e1, pair(A, B)), true)
	interface:expect_equal(ecs.get(e1, pair(D, A)), 1)
	ecs.bulk_set(e1, { pair(A, B), pair(D, A) }, { -1, 2 })
	interface:expect_equal(ecs.get(e1, pair(A, B)), -1)
	interface:expect_equal(ecs.get(e1, pair(D, A)), 2)
end)

PREFIX("bulk_remove")

TEST("component pairs", function(interface)
	ecs.bulk_set(e1, { pair(A, B), pair(D, A) }, { true, 1 })
	ecs.bulk_remove(e1, { pair(A, B), pair(D, A) })
	interface:expect_equal(ecs.get(e1, pair(A, B)), nil)
	interface:expect_equal(ecs.get(e1, pair(D, A)), nil)
end)

TEST("components", function(interface)
	ecs.bulk_set(e1, { A, B, C }, { 1, 2, 3 })
	ecs.bulk_remove(e1, { A, B, C })
	interface:expect_equal(ecs.get(e1, A), nil)
	interface:expect_equal(ecs.get(e1, B), nil)
	interface:expect_equal(ecs.get(e1, C), nil)
	interface:expect_falsy(ecs.has(e1, A))
	interface:expect_falsy(ecs.has(e1, B))
	interface:expect_falsy(ecs.has(e1, C))
end)

TEST("components and tag", function(interface)
	ecs.bulk_set(e1, { A, B, C }, { 1, 2, 3 })
	ecs.bulk_set(e1, { D, E, F }, { 4, nil, 6 })
	ecs.bulk_remove(e1, { A, E, F })
	interface:expect_equal(ecs.get(e1, A), nil)
	interface:expect_equal(ecs.get(e1, B), 2)
	interface:expect_equal(ecs.get(e1, C), 3)
	interface:expect_equal(ecs.get(e1, D), 4)
	interface:expect_equal(ecs.get(e1, E), nil)
	interface:expect_equal(ecs.get(e1, F), nil)
	interface:expect_falsy(ecs.has(e1, A))
	interface:expect_truthy(ecs.has(e1, B))
	interface:expect_truthy(ecs.has(e1, C))
	interface:expect_truthy(ecs.has(e1, D))
	interface:expect_falsy(ecs.has(e1, E))
	interface:expect_falsy(ecs.has(e1, F))
end)

PREFIX("bulk_get")

TEST("works", function(interface)
	ecs.bulk_set(e1, { A, B, C }, { 1, 2, 3 })
	ecs.bulk_set(e1, { D, E, F }, { 4, nil, 6 })
	ecs.bulk_remove(e1, { A, E, F })
	interface:expect_equal(ecs.bulk_get(e1, { D, E, F, A, B, C }), { 4, nil, nil, nil, 2, 3 })
end)

return DONE()
